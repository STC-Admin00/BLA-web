{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useAxiosFetch = dataUrl => {\n  _s();\n\n  // SET THE HOOKS\n  const [data, setData] = useState([]);\n  const [fetchError, setFetchError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // USE EFFECT\n\n  useEffect(() => {\n    let isMounted = true;\n    const source = axios.CancelToken.source();\n\n    const fetchData = async url => {\n      setIsLoading(true);\n\n      try {\n        const response = await axios.get(url, {\n          cancelToken: source.token\n        });\n\n        if (isMounted) {\n          setData(response.data);\n          setFetchError(null);\n        }\n      } catch (err) {\n        if (isMounted) {\n          setFetchError(err.message);\n          setData([]);\n        }\n      } finally {\n        isMounted && setIsLoading(false);\n      }\n    }; // CALL TO API\n\n\n    fetchData(dataUrl);\n\n    const cleanUp = () => {\n      isMounted = false;\n      source.cancel();\n    };\n\n    return cleanUp;\n  }, [dataUrl]); // RETURN THE RECEIVED DATA\n\n  return {\n    data,\n    fetchError,\n    isLoading\n  };\n};\n\n_s(useAxiosFetch, \"+XJtC1F4PrEeMvccO02DD8cTlfg=\");\n\nexport default useAxiosFetch;","map":{"version":3,"sources":["/Users/mikedagawd/services/bla-client/src/hooks/useAxiosFetch.js"],"names":["useState","useEffect","axios","useAxiosFetch","dataUrl","data","setData","fetchError","setFetchError","isLoading","setIsLoading","isMounted","source","CancelToken","fetchData","url","response","get","cancelToken","token","err","message","cleanUp","cancel"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAAA;;AAE/B;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C,CAN+B,CAQ/B;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,SAAS,GAAG,IAAhB;AACA,UAAMC,MAAM,GAAGV,KAAK,CAACW,WAAN,CAAkBD,MAAlB,EAAf;;AAEA,UAAME,SAAS,GAAG,MAAOC,GAAP,IAAe;AAC7BL,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AAEA,cAAMM,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUF,GAAV,EAAe;AAClCG,UAAAA,WAAW,EAAEN,MAAM,CAACO;AADc,SAAf,CAAvB;;AAIA,YAAIR,SAAJ,EAAe;AACXL,UAAAA,OAAO,CAACU,QAAQ,CAACX,IAAV,CAAP;AACAG,UAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ,OAVD,CAUE,OAAOY,GAAP,EAAY;AACV,YAAIT,SAAJ,EAAe;AACXH,UAAAA,aAAa,CAACY,GAAG,CAACC,OAAL,CAAb;AACAf,UAAAA,OAAO,CAAC,EAAD,CAAP;AACH;AACJ,OAfD,SAeU;AACNK,QAAAA,SAAS,IAAID,YAAY,CAAC,KAAD,CAAzB;AACH;AACJ,KApBD,CAJY,CA0BhB;;;AAEII,IAAAA,SAAS,CAACV,OAAD,CAAT;;AAEA,UAAMkB,OAAO,GAAG,MAAM;AAClBX,MAAAA,SAAS,GAAG,KAAZ;AACAC,MAAAA,MAAM,CAACW,MAAP;AACH,KAHD;;AAKA,WAAOD,OAAP;AAEH,GArCQ,EAqCN,CAAClB,OAAD,CArCM,CAAT,CAV+B,CAiD/B;;AAEA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,UAAR;AAAoBE,IAAAA;AAApB,GAAP;AACH,CApDD;;GAAMN,a;;AAsDN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useAxiosFetch = (dataUrl) => {\n\n    // SET THE HOOKS\n\n    const [data, setData] = useState([]);\n    const [fetchError, setFetchError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    // USE EFFECT\n\n    useEffect(() => {\n        let isMounted = true;\n        const source = axios.CancelToken.source()\n\n        const fetchData = async (url) => {\n            setIsLoading(true);\n            try {\n\n                const response = await axios.get(url, {\n                    cancelToken: source.token\n                });\n\n                if (isMounted) {\n                    setData(response.data)\n                    setFetchError(null)\n                }\n            } catch (err) {\n                if (isMounted) {\n                    setFetchError(err.message)\n                    setData([])\n                }\n            } finally {\n                isMounted && setIsLoading(false);\n            }\n        }\n\n    // CALL TO API\n\n        fetchData(dataUrl);\n\n        const cleanUp = () => {\n            isMounted = false;\n            source.cancel();\n        }\n\n        return cleanUp;\n\n    }, [dataUrl]);\n\n    // RETURN THE RECEIVED DATA\n\n    return { data, fetchError, isLoading };\n}\n\nexport default useAxiosFetch;"]},"metadata":{},"sourceType":"module"}