{"ast":null,"code":"import { createStore, action, thunk, computed } from 'easy-peasy';\nimport storiesApi from './api/stories';\nimport usersApi from './api/users';\nexport default createStore({\n  // STORIES' STATES\n  stories: [],\n  setStories: action((state, payload) => {\n    state.stories = payload;\n  }),\n  storyTitle: '',\n  setStoryTile: action((state, payload) => {\n    state.storyTitle = payload;\n  }),\n  storyURL: '',\n  setStoryURL: action((state, payload) => {\n    state.storyURL = payload;\n  }),\n  imageURL: '',\n  setImageURL: action((state, payload) => {\n    state.imageURL = payload;\n  }),\n  author: '',\n  setAuthor: action((state, payload) => {\n    state.author = payload;\n  }),\n  category: '',\n  setCategory: action((state, payload) => {\n    state.category = payload;\n  }),\n  desc: '',\n  setDesc: action((state, payload) => {\n    state.desc = payload;\n  }),\n  genre: '',\n  setGenre: action((state, payload) => {\n    state.genre = payload;\n  }),\n  regId: 0,\n  setRegId: action((state, payload) => {\n    state.regId = payload;\n  }),\n  storyCount: computed(state => state.stories.length),\n  getStoryById: computed(state => {\n    return id => state.stories.find(story => story.id.toString() === id);\n  }),\n  saveStory: thunk(async (actions, newStory, helpers) => {\n    const {\n      stories\n    } = helpers.getState();\n\n    try {\n      const response = await storiesApi.post('/stories', newStory);\n      actions.setStories([...stories, response.data]);\n      actions.setStoryTitle('');\n      actions.setStoryURL('');\n      actions.setImageURL('');\n      actions.setAuthor('');\n      actions.setCategory('');\n      actions.setDesc('');\n      actions.setGenre('');\n      actions.setRegId(0);\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }),\n  deleteStory: thunk(async (actions, id, helpers) => {\n    const {\n      stories\n    } = helpers.getState();\n\n    try {\n      await storiesApi.delete(`/stories/${id}`);\n      actions.setStories(stories.filter(story => story.id !== id));\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }),\n  editStory: thunk(async (actions, updatedStory, helpers) => {\n    const {\n      stories\n    } = helpers.getState();\n    const {\n      id\n    } = updatedStory;\n\n    try {\n      const response = await storiesApi.put(`/stories/${id}`, updatedStory);\n      actions.setStories(stories.map(story => story.id === id ? { ...response.data\n      } : story));\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }),\n  // USERS' STATES\n  users: [],\n  setUsers: action((state, payload) => {\n    state.users = payload;\n  }),\n  firstName: '',\n  setFirstName: action((state, payload) => {\n    state.firstName = payload;\n  }),\n  lastName: '',\n  setLastName: action((state, payload) => {\n    state.lastName = payload;\n  }),\n  email: '',\n  setEmail: action((state, payload) => {\n    state.email = payload;\n  }),\n  username: '',\n  setUsername: action((state, payload) => {\n    state.username = payload;\n  }),\n  password: '',\n  setPassword: action((state, payload) => {\n    state.password = payload;\n  }),\n  userCount: computed(state => state.users.length),\n  getUserById: computed(state => {\n    return id => state.users.find(user => user.id.toString() === id);\n  }),\n  saveUser: thunk(async (actions, newUser, helpers) => {\n    const {\n      users\n    } = helpers.getState();\n\n    try {\n      const response = await usersApi.post('/users', newUser);\n      actions.setUsers([...users, response.data]);\n      actions.setFirstName('');\n      actions.setLastName('');\n      actions.setEmail('');\n      actions.setUsername('');\n      actions.setPassword('');\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }),\n  deleteUser: thunk(async (actions, id, helpers) => {\n    const {\n      users\n    } = helpers.getState();\n\n    try {\n      await usersApi.delete(`/users/${id}`);\n      actions.setUsers(users.filter(user => user.id !== id));\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }),\n  editUser: thunk(async (actions, updatedUser, helpers) => {\n    const {\n      users\n    } = helpers.getState();\n    const {\n      id\n    } = updatedUser;\n\n    try {\n      const response = await usersApi.put(`/users/${id}`, updatedUser);\n      actions.setUsers(users.map(user => user.id === id ? { ...response.data\n      } : user));\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  })\n});","map":{"version":3,"sources":["/Users/mikedagawd/services/bla-client/src/store.js"],"names":["createStore","action","thunk","computed","storiesApi","usersApi","stories","setStories","state","payload","storyTitle","setStoryTile","storyURL","setStoryURL","imageURL","setImageURL","author","setAuthor","category","setCategory","desc","setDesc","genre","setGenre","regId","setRegId","storyCount","length","getStoryById","id","find","story","toString","saveStory","actions","newStory","helpers","getState","response","post","data","setStoryTitle","err","console","log","message","deleteStory","delete","filter","editStory","updatedStory","put","map","users","setUsers","firstName","setFirstName","lastName","setLastName","email","setEmail","username","setUsername","password","setPassword","userCount","getUserById","user","saveUser","newUser","deleteUser","editUser","updatedUser"],"mappings":"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","sourcesContent":["import { createStore, action, thunk, computed } from 'easy-peasy';\nimport storiesApi from './api/stories';\nimport usersApi from './api/users';\n\nexport default createStore({\n\n// STORIES' STATES\n\n    stories: [],\n    setStories: action((state, payload) => {\n        state.stories = payload;\n    }),\n    storyTitle: '',\n    setStoryTile: action((state, payload) => {\n        state.storyTitle = payload;\n    }),\n    storyURL: '',\n    setStoryURL: action((state, payload) => {\n        state.storyURL = payload;\n    }),\n    imageURL: '',\n    setImageURL: action((state, payload) => {\n        state.imageURL = payload;\n    }),\n    author: '',\n    setAuthor: action((state, payload) => {\n        state.author = payload;\n    }),\n    category: '',\n    setCategory: action((state, payload) => {\n        state.category = payload;\n    }),\n    desc: '',\n    setDesc: action((state, payload) => {\n        state.desc = payload;\n    }),\n    genre: '',\n    setGenre: action((state, payload) => {\n        state.genre = payload;\n    }),\n    regId: 0,\n    setRegId: action((state, payload) => {\n        state.regId = payload;\n    }),\n    storyCount: computed((state) => state.stories.length),\n    getStoryById: computed((state) => {\n        return (id) => state.stories.find(story => (story.id).toString() === id)\n    }),\n    saveStory: thunk(async (actions, newStory, helpers) => {\n        const { stories } = helpers.getState();\n        try { \n            const response = await storiesApi.post('/stories', newStory);\n            actions.setStories([...stories, response.data]);\n            actions.setStoryTitle('')\n            actions.setStoryURL('')\n            actions.setImageURL('')\n            actions.setAuthor('')\n            actions.setCategory('')\n            actions.setDesc('')\n            actions.setGenre('')\n            actions.setRegId(0)\n        } catch (err) {\n            console.log(`Error: ${err.message}`);\n        }\n    }),\n    deleteStory: thunk(async (actions, id, helpers) => {\n        const { stories } = helpers.getState();\n        try {\n            await storiesApi.delete(`/stories/${id}`);\n            actions.setStories(stories.filter(story => story.id !== id));\n        } catch (err) {\n            console.log(`Error: ${err.message}`);\n        }\n    }),\n    editStory: thunk(async (actions, updatedStory, helpers) => {\n        const { stories } = helpers.getState();\n        const { id } = updatedStory;\n        try {\n            const response = await storiesApi.put(`/stories/${id}`, updatedStory)\n            actions.setStories(stories.map(story => story.id === id ? { ...response.data } : story));\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }),\n\n// USERS' STATES\n\n    users: [],\n    setUsers: action((state, payload) => {\n        state.users = payload;\n    }),\n    firstName: '',\n    setFirstName: action((state, payload) => {\n        state.firstName = payload;\n    }),\n    lastName: '',\n    setLastName: action((state, payload) => {\n        state.lastName = payload;\n    }),\n    email: '',\n    setEmail: action((state, payload) => {\n        state.email = payload;\n    }),\n    username: '',\n    setUsername: action((state, payload) => {\n        state.username = payload;\n    }),\n    password: '',\n    setPassword: action((state, payload) => {\n        state.password = payload;\n    }),\n    userCount: computed((state) => state.users.length),\n    getUserById: computed((state) => {\n        return (id) => state.users.find(user => (user.id).toString() === id)\n    }),\n    saveUser: thunk(async (actions, newUser, helpers) => {\n        const { users } = helpers.getState();\n        try { \n            const response = await usersApi.post('/users', newUser);\n            actions.setUsers([...users, response.data]);\n            actions.setFirstName('')\n            actions.setLastName('')\n            actions.setEmail('')\n            actions.setUsername('')\n            actions.setPassword('')\n        } catch (err) {\n            console.log(`Error: ${err.message}`);\n        }\n    }),\n    deleteUser: thunk(async (actions, id, helpers) => {\n        const { users } = helpers.getState();\n        try {\n            await usersApi.delete(`/users/${id}`);\n            actions.setUsers(users.filter(user => user.id !== id));\n        } catch (err) {\n            console.log(`Error: ${err.message}`);\n        }\n    }),\n    editUser: thunk(async (actions, updatedUser, helpers) => {\n        const { users } = helpers.getState();\n        const { id } = updatedUser;\n        try {\n            const response = await usersApi.put(`/users/${id}`, updatedUser)\n            actions.setUsers(users.map(user => user.id === id ? { ...response.data } : user));\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }),\n});"]},"metadata":{},"sourceType":"module"}