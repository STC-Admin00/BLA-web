{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types'; // REGISTER USER\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('http://localhost:3000/users/register', userData) // REGISTER ACTION\n  .then(res => history.push('/login')) // RE-DIRECT LOGIN ON SUCCESSFUL REGISTER\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // LOGIN - GET USER TOKEN\n\nexport const loginUser = userData => dispatch => {\n  axios.post('http://localhost:3000/users/login', userData).then(res => {\n    // TEMP: SET TOKEN TO LOCAL STORAGE\n    const {\n      token\n    } = res.data;\n    localStorage.setItem('jwtToken', token); // SETS TOKEN TO AUTH HEADER\n\n    setAuthToken(token); // DECODE TOKEN TO GET USER DATA\n\n    const decoded = jwt_decode(token); // SET CURRENT USER\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // SET LOGGED IN USER\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // USER LOADING\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // LOGOUT\n\nexport const logoutUser = () => dispatch => {\n  // REMOVES TOKEN FROM LOCAL STORAGE\n  localStorage.removeItem('jwtToken'); // REMOVES AUTH HEADER FROM FUTURE REQUESTS\n\n  setAuthToken(false); // SET CURRENT USER TO EMPTY OBJECT - SETS isAuthenicated TO FALSE\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/mikedagawd/services/bla-client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SACIC,UADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAIO,SAJP,C,CAMA;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACAU,IADL,CACU,sCADV,EACkDH,QADlD,EAC4D;AAD5D,GAEKI,IAFL,CAEUC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFjB,EAEyC;AAFzC,GAGKC,KAHL,CAGWC,GAAG,IACNN,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAEb,UADD;AAELc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAJhB;AASH,CAVM,C,CAYP;;AAEA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC7CT,EAAAA,KAAK,CACAU,IADL,CACU,mCADV,EAC+CH,QAD/C,EAEKI,IAFL,CAEUC,GAAG,IAAI;AAET;AACA,UAAM;AAAES,MAAAA;AAAF,QAAYT,GAAG,CAACO,IAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJS,CAKL;;AACJpB,IAAAA,YAAY,CAACoB,KAAD,CAAZ,CANS,CAOL;;AACJ,UAAMG,OAAO,GAAGtB,UAAU,CAACmB,KAAD,CAA1B,CARS,CASL;;AACJZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAbL,EAcKV,KAdL,CAcWC,GAAG,IACNN,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAEb,UADD;AAELc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAfhB;AAoBH,CArBM,C,CAuBP;;AAEA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACHR,IAAAA,IAAI,EAAEZ,gBADH;AAEHa,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM,C,CAOP;;AAEA,OAAO,MAAME,cAAc,GAAG,MAAM;AAChC,SAAO;AACHV,IAAAA,IAAI,EAAEX;AADH,GAAP;AAGH,CAJM,C,CAMP;;AAEA,OAAO,MAAMsB,UAAU,GAAG,MAAMlB,QAAQ,IAAI;AACxC;AACAa,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACA3B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAQ,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAPM","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n} from './types';\n\n// REGISTER USER\n\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post('http://localhost:3000/users/register', userData) // REGISTER ACTION\n        .then(res => history.push('/login')) // RE-DIRECT LOGIN ON SUCCESSFUL REGISTER\n        .catch(err => \n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n    );\n};\n\n// LOGIN - GET USER TOKEN\n\nexport const loginUser = userData => dispatch => {\n    axios\n        .post('http://localhost:3000/users/login', userData)\n        .then(res => {\n\n            // TEMP: SET TOKEN TO LOCAL STORAGE\n            const { token } = res.data;\n            localStorage.setItem('jwtToken', token)\n                // SETS TOKEN TO AUTH HEADER\n            setAuthToken(token);\n                // DECODE TOKEN TO GET USER DATA\n            const decoded = jwt_decode(token);\n                // SET CURRENT USER\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n            );\n};\n\n// SET LOGGED IN USER\n\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// USER LOADING\n\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\n// LOGOUT\n\nexport const logoutUser = () => dispatch => {\n    // REMOVES TOKEN FROM LOCAL STORAGE\n    localStorage.removeItem('jwtToken');\n    // REMOVES AUTH HEADER FROM FUTURE REQUESTS\n    setAuthToken(false);\n    // SET CURRENT USER TO EMPTY OBJECT - SETS isAuthenicated TO FALSE\n    dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}